import os
import httpx
import time
import asyncio
import re
from dotenv import load_dotenv

load_dotenv()

OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
LAST_REQUEST_TIME = {}

MODELS = [
    "deepseek/deepseek-r1-0528-qwen3-8b",
    "gryphe/mythomax-l2-13b"
]

SYSTEM_PROMPT = (
    "–¢—ã ‚Äî –¥–æ–±—Ä—ã–π —Å–∫–∞–∑–æ—á–Ω–∏–∫. –ü—Ä–∏–¥—É–º–∞–π –û–î–ù–£ –∫–æ—Ä–æ—Ç–∫—É—é –∏ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—É—é —Å–∫–∞–∑–∫—É –¥–ª—è –¥–µ—Ç–µ–π (3‚Äì8 –ª–µ—Ç). "
    "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤—å –º–æ—Ä–∞–ª—å ‚Äî –¥–æ–±—Ä–æ –ø–æ–±–µ–∂–¥–∞–µ—Ç, –∑–∞–±–æ—Ç–∞ –≤–∞–∂–Ω–∞, –¥—Ä—É–∂–±–∞ —Ü–µ–Ω–Ω–∞ –∏ —Ç.–ø. "
    "–ù–µ –Ω–∞—á–∏–Ω–∞–π –≤—Ç–æ—Ä—É—é —Å–∫–∞–∑–∫—É –¥–∞–∂–µ –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å –º–µ—Å—Ç–æ! –õ—É—á—à–µ –∑–∞–∫–æ–Ω—á–∏ –ø–µ—Ä–≤—É—é –¥–æ–±—Ä–æ–π –º–æ—Ä–∞–ª—å—é. "
    "–ó–∞–≤–µ—Ä—à–∏ —Å–∫–∞–∑–∫—É —Å–ª–æ–≤–∞–º–∏ —Ç–∏–ø–∞: ¬´–í–æ—Ç –∏ —Å–∫–∞–∑–∫–µ –∫–æ–Ω–µ—Ü¬ª, ¬´–¢–∞–∫ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å —Å–∫–∞–∑–∫–∞¬ª –∏–ª–∏ ¬´–° —Ç–µ—Ö –ø–æ—Ä –æ–Ω–∏ –∂–∏–ª–∏ —Å—á–∞—Å—Ç–ª–∏–≤–æ¬ª."
)

def is_story_complete(story: str) -> bool:
    final_markers = [
        "–í–æ—Ç –∏ —Å–∫–∞–∑–∫–µ –∫–æ–Ω–µ—Ü",
        "–¢–∞–∫ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å —Å–∫–∞–∑–∫–∞",
        "–ò –∂–∏–ª–∏ –æ–Ω–∏ –¥–æ–ª–≥–æ –∏ —Å—á–∞—Å—Ç–ª–∏–≤–æ",
        "–° —Ç–µ—Ö –ø–æ—Ä –æ–Ω–∏ –∂–∏–ª–∏",
        "–ò –Ω–∞ —ç—Ç–æ–º —Å–∫–∞–∑–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å"
    ]
    return any(marker in story for marker in final_markers)

def cut_to_first_story(story: str) -> str:
    intro_markers = [
        r"(–ñ–∏–ª–∞-–±—ã–ª–∞|–ñ–∏–ª –¥–∞ –±—ã–ª|–û–¥–Ω–∞–∂–¥—ã|–î–∞–≤–Ω—ã–º-–¥–∞–≤–Ω–æ|–í –æ–¥–Ω–æ–º –ª–µ—Å—É|–í –¥–∞–ª—ë–∫–æ–π –¥–µ—Ä–µ–≤–Ω–µ|–ë—ã–ª–∞ —É –±–∞–±—É—à–∫–∏)"
    ]
    matches = list(re.finditer(intro_markers[0], story))
    if len(matches) > 1:
        cut_pos = matches[1].start()
        print("ü™Ñ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∫–∞–∑–æ–∫ ‚Äî –æ–±—Ä–µ–∑–∞–µ–º –Ω–∞ –ø–µ—Ä–≤–æ–π.")
        return story[:cut_pos].strip() + "\n\n(ü™Ñ –û–±—Ä–µ–∑–∞–Ω–æ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å–∫–∞–∑–∫–µ)"
    return story

async def call_openrouter(messages, model, max_tokens=1700, retries=3, delay=5):
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "HTTP-Referer": "https://chat.openai.com/",
        "X-Title": "FairytaleBot"
    }

    for attempt in range(1, retries + 1):
        async with httpx.AsyncClient(timeout=60.0) as client:
            try:
                response = await client.post(
                    "https://openrouter.ai/api/v1/chat/completions",
                    headers=headers,
                    json={
                        "model": model,
                        "messages": messages,
                        "max_tokens": max_tokens,
                        "temperature": 0.9
                    }
                )
                print(f"üì° [{model}] –û—Ç–≤–µ—Ç OpenRouter:", response.text)
                response.raise_for_status()
                return response.json()["choices"][0]["message"]["content"]
            except httpx.HTTPStatusError as e:
                if e.response.status_code == 429:
                    print(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt} ‚Äî –º–æ–¥–µ–ª—å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–∞ ({model})")
                    await asyncio.sleep(delay)
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ [{model}]:", str(e))
                    raise e
            except Exception as e:
                print(f"‚ùå –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ [{model}]:", str(e))
                raise e
    raise Exception(f"–ú–æ–¥–µ–ª—å {model} –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–∞ (429) –ø–æ—Å–ª–µ {retries} –ø–æ–ø—ã—Ç–æ–∫")

async def generate_fairytale(user_id=None):
    now = time.time()
    if user_id:
        if user_id in LAST_REQUEST_TIME and now - LAST_REQUEST_TIME[user_id] < 300:
            return "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
        LAST_REQUEST_TIME[user_id] = now

    messages = [
        {"role": "system", "content": SYSTEM_PROMPT},
        {"role": "user", "content": "–†–∞—Å—Å–∫–∞–∂–∏ –æ–¥–Ω—É –∑–∞–∫–æ–Ω—á–µ–Ω–Ω—É—é —Å–∫–∞–∑–∫—É –¥–ª—è –¥–µ—Ç–µ–π. –¢–æ–ª—å–∫–æ –æ–¥–Ω—É. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤—å –º–æ—Ä–∞–ª—å –∏ —Ñ–∏–Ω–∞–ª."}
    ]

    for model in MODELS:
        try:
            story = await call_openrouter(messages, model)
            story = cut_to_first_story(story)

            if is_story_complete(story):
                return story

            print("‚ö†Ô∏è –°–∫–∞–∑–∫–∞ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω–∞—è ‚Äî –ø—Ä–æ–±—É–µ–º –∑–∞–≤–µ—Ä—à–∏—Ç—å...")
            continuation_prompt = [
                {"role": "system", "content": "–¢—ã –ø—Ä–æ–¥–æ–ª–∂–∞–µ—à—å –Ω–∞—á–∞—Ç—É—é —Å–∫–∞–∑–∫—É. –ó–∞–≤–µ—Ä—à–∏ –µ—ë –∫—Ä–∞—Å–∏–≤–æ, —Å –º–æ—Ä–∞–ª—å—é –∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Ñ—Ä–∞–∑–æ–π."},
                {"role": "user", "content": f"–í–æ—Ç –ø–µ—Ä–≤–∞—è —á–∞—Å—Ç—å —Å–∫–∞–∑–∫–∏:\n\n{story}\n\n–ó–∞–≤–µ—Ä—à–∏ –∏–º–µ–Ω–Ω–æ —ç—Ç—É –∏—Å—Ç–æ—Ä–∏—é. –°–æ—Ö—Ä–∞–Ω–∏ —Å—Ç–∏–ª—å. –î–æ–±–∞–≤—å –º–æ—Ä–∞–ª—å –∏ —Ñ–∏–Ω–∞–ª. –ù–µ –Ω–∞—á–∏–Ω–∞–π –Ω–æ–≤—É—é —Å–∫–∞–∑–∫—É."}
            ]
            continuation = await call_openrouter(continuation_prompt, model)
            full_story = story.strip() + "\n\n" + continuation.strip()
            return full_story
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å [{model}]:", str(e))

    return (
        "–û–π... –¢–∏–º–æ—à–∞ —Ö–æ—Ç–µ–ª —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å —Å–∫–∞–∑–∫—É, –Ω–æ –≤—Å–µ —Å–∫–∞–∑–æ—á–Ω—ã–µ –ø–æ—Ä—Ç–∞–ª—ã –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã. "
        "–ü–æ–ø—Ä–æ–±—É–π —á—É—Ç—å –ø–æ–∑–∂–µ ‚Äî –æ–Ω —É–∂–µ –∫–∏–ø—è—Ç–∏—Ç —á–∞–π–Ω–∏–∫ –¥–ª—è –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è. üçµ"
    )