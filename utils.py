import os
import httpx
import time
from dotenv import load_dotenv

load_dotenv()

OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
LAST_REQUEST_TIME = {}

SYSTEM_PROMPT = (
    "–¢—ã ‚Äî –¥–æ–±—Ä—ã–π —Å–∫–∞–∑–æ—á–Ω–∏–∫. –ü–∏—à–∏ –¥–æ–±—Ä—ã–µ, –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ —Å–∫–∞–∑–∫–∏ –¥–ª—è –¥–µ—Ç–µ–π (–¥–µ—Ç—è–º 3‚Äì8 –ª–µ—Ç —á–∏—Ç–∞—é—Ç —Ä–æ–¥–∏—Ç–µ–ª–∏). "
    "–°–∫–∞–∑–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ—Å—Ç–æ–π, –ø–æ–Ω—è—Ç–Ω–æ–π, —Å –ª—ë–≥–∫–∏–º —é–º–æ—Ä–æ–º, –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–µ—Å—Ç–∏ –¥–æ–±—Ä—É—é –º–æ—Ä–∞–ª—å. "
    "–ó–∞–∫–∞–Ω—á–∏–≤–∞–π —Å–∫–∞–∑–∫—É —Ñ—Ä–∞–∑–æ–π ¬´–í–æ—Ç –∏ —Å–∫–∞–∑–∫–µ –∫–æ–Ω–µ—Ü¬ª –∏–ª–∏ –ø–æ–¥–æ–±–Ω–æ–π."
)

def is_story_complete(story: str) -> bool:
    final_markers = [
        "–í–æ—Ç –∏ —Å–∫–∞–∑–∫–µ –∫–æ–Ω–µ—Ü",
        "–ò –∂–∏–ª–∏ –æ–Ω–∏ –¥–æ–ª–≥–æ –∏ —Å—á–∞—Å—Ç–ª–∏–≤–æ",
        "–¢–∞–∫ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å —ç—Ç–∞ —Å–∫–∞–∑–∫–∞",
        "–° —Ç–µ—Ö –ø–æ—Ä –æ–Ω–∏ —Å—Ç–∞–ª–∏"
    ]
    return any(marker in story for marker in final_markers)

async def call_openrouter(messages, model="deepseek/deepseek-r1-0528-qwen3-8b", max_tokens=1800):
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "HTTP-Referer": "https://chat.openai.com/",
        "X-Title": "FairytaleBot"
    }
    async with httpx.AsyncClient(timeout=60.0) as client:
        try:
            response = await client.post(
                "https://openrouter.ai/api/v1/chat/completions",
                headers=headers,
                json={
                    "model": model,
                    "messages": messages,
                    "max_tokens": max_tokens,
                    "temperature": 0.9
                }
            )
            print("üì° –û—Ç–≤–µ—Ç OpenRouter:", response.text)
            response.raise_for_status()
            return response.json()["choices"][0]["message"]["content"]
        except httpx.RequestError as e:
            print("‚ùå –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞:", str(e))
            raise e
        except httpx.HTTPStatusError as e:
            print("‚ùå HTTP –æ—à–∏–±–∫–∞:", str(e))
            print("üîΩ –û—Ç–≤–µ—Ç —Ç–µ–ª–∞:", e.response.text)
            raise e

async def generate_fairytale(user_id=None):
    now = time.time()
    if user_id:
        if user_id in LAST_REQUEST_TIME and now - LAST_REQUEST_TIME[user_id] < 300:
            return "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
        LAST_REQUEST_TIME[user_id] = now

    messages = [
        {"role": "system", "content": SYSTEM_PROMPT},
        {"role": "user", "content": "–ü—Ä–∏–¥—É–º–∞–π –∫–æ—Ä–æ—Ç–∫—É—é, –Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—É—é —Å–∫–∞–∑–∫—É –¥–ª—è –¥–µ—Ç–µ–π. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∏ –¥–æ–±—Ä—É—é –º–æ—Ä–∞–ª—å –∏ —Ñ–∏–Ω–∞–ª —Ç–∏–ø–∞ ¬´–í–æ—Ç –∏ —Å–∫–∞–∑–∫–µ –∫–æ–Ω–µ—Ü¬ª."}
    ]

    try:
        story = await call_openrouter(messages)
        print("üìú –°–∫–∞–∑–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞:\n", story)
        if is_story_complete(story):
            return story
        else:
            return story + "\n\n(‚ö†Ô∏è –ò—Å—Ç–æ—Ä–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ –≤—ã–¥–∞–Ω–∞.)"
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:", str(e))
        return "–û–π... —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –¢–∏–º–æ—à–∞ –ø–æ—Ç–µ—Ä—è–ª —Å–∫–∞–∑–∫—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.\n‚ùå –û—à–∏–±–∫–∞: {}".format(str(e))