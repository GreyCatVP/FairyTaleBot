# custom_story_conversation.py
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ConversationHandler, CommandHandler, MessageHandler, filters, ContextTypes
from utils import generate_fairytale

HERO, THEME, TONE, CONFIRM = range(4)

async def start_custom_story(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–∞–≤–∞–π —Å–æ—á–∏–Ω–∏–º —Ç–≤–æ—é —Å–∫–∞–∑–∫—É! ‚ú®\n–ö—Ç–æ –±—É–¥–µ—Ç –≥–ª–∞–≤–Ω—ã–º –≥–µ—Ä–æ–µ–º?")
    return HERO

async def set_hero(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['hero'] = update.message.text
    await update.message.reply_text("–û —á—ë–º –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–∫–∞–∑–∫–∞? –ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ.")
    return THEME

async def set_theme(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['theme'] = update.message.text
    keyboard = [["–í–µ—Å—ë–ª–∞—è üéâ", "–ü–æ—É—á–∏—Ç–µ–ª—å–Ω–∞—è üìö"], ["–°—Ç—Ä–∞—à–Ω–∞—è üëª", "–ê–±—Å—É—Ä–¥–Ω–∞—è ü§™"]]
    await update.message.reply_text(
        "–ö–∞–∫–æ–π –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–∫–∞–∑–∫–∞ –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é?",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return TONE

async def set_tone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['tone'] = update.message.text

    await update.message.reply_text(
        "–¢–∏–º–æ—à–∞ –º–æ–∂–µ—Ç —Å–æ—á–∏–Ω–∏—Ç—å —Å–∫–∞–∑–∫—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è ‚òï\n"
        "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å ‚Äî –º–æ–∂–µ—à—å –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–æ–º: üí≥ `–ó–¥–µ—Å—å –±—É–¥–µ—Ç –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞`\n\n"
        "–ö–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—à—å ‚Äî –Ω–∞–∂–º–∏ '–Ø –æ–ø–ª–∞—Ç–∏–ª', –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç.",
        reply_markup=ReplyKeyboardMarkup(
            [["–Ø –æ–ø–ª–∞—Ç–∏–ª üíñ"], ["–•–æ—á—É –±–µ–∑ –æ–ø–ª–∞—Ç—ã üôà"], ["–û—Ç–º–µ–Ω–∞"]],
            one_time_keyboard=True, resize_keyboard=True
        )
    )
    return CONFIRM

async def confirm_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tone = context.user_data.get('tone', '')
    hero = context.user_data.get('hero', '')
    theme = context.user_data.get('theme', '')

    prompt = f"–°–∫–∞–∑–∫–∞ —Å –≥–µ—Ä–æ–µ–º: {hero}. –¢–µ–º–∞: {theme}. –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {tone}.")
    await update.message.reply_text("–¢–∏–º–æ—à–∞ —Å–µ–ª —É –∫–∞–º–∏–Ω–∞ –∏ –Ω–∞—á–∞–ª –ø–∏—Å–∞—Ç—å... üïØ")
    story = await generate_fairytale(prompt)
    await update.message.reply_text(story)
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–•–æ—Ä–æ—à–æ, –≤–µ—Ä–Ω—ë–º—Å—è –∫ —Å–∫–∞–∑–∫–∞–º –ø–æ–∑–∂–µ ‚ò∫Ô∏è")
    return ConversationHandler.END

custom_story_conv = ConversationHandler(
    entry_points=[CommandHandler("custom", start_custom_story)],
    states={
        HERO: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_hero)],
        THEME: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_theme)],
        TONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_tone)],
        CONFIRM: [
            MessageHandler(filters.Regex("–Ø –æ–ø–ª–∞—Ç–∏–ª"), confirm_payment),
            MessageHandler(filters.Regex("–•–æ—á—É –±–µ–∑ –æ–ø–ª–∞—Ç—ã"), confirm_payment),
            MessageHandler(filters.Regex("–û—Ç–º–µ–Ω–∞"), cancel)
        ]
    },
    fallbacks=[CommandHandler("cancel", cancel)]
)