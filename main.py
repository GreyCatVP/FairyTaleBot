import os
import httpx
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

HEADERS = {
    "Authorization": f"Bearer {OPENROUTER_API_KEY}",
    "HTTP-Referer": "https://t.me/SkazochnikTimoshaBot",
    "Content-Type": "application/json"
}

ENDINGS = [
    "–í–æ—Ç –∏ —Å–∫–∞–∑–∫–µ –∫–æ–Ω–µ—Ü.",
    "–ò –∂–∏–ª–∏ –æ–Ω–∏ –¥–æ–ª–≥–æ –∏ —Å—á–∞—Å—Ç–ª–∏–≤–æ.",
    "–ò —Å —Ç–µ—Ö –ø–æ—Ä –Ω–∏–∫—Ç–æ –∏—Ö –Ω–µ –≤–∏–¥–µ–ª.",
    "–° —Ç–µ—Ö –ø–æ—Ä –≤—Å–µ –±—ã–ª–∏ —Å—á–∞—Å—Ç–ª–∏–≤—ã.",
    "–ê –¥–æ–±—Ä–∞—è —Ñ–µ—è –Ω–∞–±–ª—é–¥–∞–ª–∞ –∑–∞ –Ω–∏–º–∏ —Å –Ω–µ–±–∞.",
    "–¢–∞–∫ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å —ç—Ç–∞ –∏—Å—Ç–æ—Ä–∏—è.",
    "–ò –≤—Å—ë –±—ã–ª–æ —Ö–æ—Ä–æ—à–æ.",
    "–ê –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º—Å—è –≤ —Å–ª–µ–¥—É—é—â—É—é —Å–∫–∞–∑–∫—É.",
    "–í–æ—Ç –∏ –≤—Å—ë, —Ä–µ–±—è—Ç–∞.",
    "–í–æ—Ç —Ç–∞–∫–∞—è —Å–∫–∞–∑–∫–∞.",
    "–ò –±–æ–ª—å—à–µ –æ–Ω–∏ –Ω–µ –±–æ—è–ª–∏—Å—å —Ç–µ–º–Ω–æ—Ç—ã.",
]

def is_story_ok(story: str):
    return len(story) >= 1200

def ensure_ending(story: str):
    if not any(end in story[-300:] for end in ENDINGS):
        story += "\n\n–í–æ—Ç –∏ —Å–∫–∞–∑–∫–µ –∫–æ–Ω–µ—Ü. ‚ú®"
    return story

async def generate_fairytale():
    payload = {
        "model": "deepseek/deepseek-r1-0528:free",
        "max_tokens": 1600,
        "messages": [
            {
                "role": "system",
                "content": (
                    "–¢—ã ‚Äî —Å–∫–∞–∑–æ—á–Ω–∏–∫. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –¥–æ–±—Ä—ã–µ, –ø–æ–Ω—è—Ç–Ω—ã–µ —Å–∫–∞–∑–∫–∏ –¥–ª—è –¥–µ—Ç–µ–π. "
                    "–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: –¥–µ—Ç–∏ 3‚Äì8 –ª–µ—Ç, —á–∏—Ç–∞—é—Ç —Ä–æ–¥–∏—Ç–µ–ª–∏. "
                    "–°–∫–∞–∑–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–π, –±–µ–∑ –æ–±—Ä—ã–≤–∞. –ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏—á–µ–≥–æ –ø–æ—Å–ª–µ —Å–∫–∞–∑–∫–∏. "
                    "–ñ–µ–ª–∞–µ–º—ã–π –æ–±—ä—ë–º ‚Äî –æ—Ç 1500 –¥–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤."
                )
            },
            {
                "role": "user",
                "content": "–†–∞—Å—Å–∫–∞–∂–∏ –¥–æ–±—Ä—É—é —Å–∫–∞–∑–∫—É."
            }
        ]
    }

    for attempt in range(3):
        try:
            async with httpx.AsyncClient(timeout=90.0) as client:
                response = await client.post(
                    "https://openrouter.ai/api/v1/chat/completions",
                    headers=HEADERS,
                    json=payload
                )
                response.raise_for_status()
                story = response.json()["choices"][0]["message"]["content"].strip()
                print(f"\n=== GPT –°–∫–∞–∑–∫–∞ [{attempt+1}] ===\n{story}\n")
                if is_story_ok(story):
                    return ensure_ending(story)
        except Exception as e:
            print(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ {attempt+1}: –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ‚Äî {e}")

    return "–°–∫–∞–∑–∫–∞ —Å–±–µ–∂–∞–ª–∞ –≤ –ª–µ—Å... –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ üêæ"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –°–∫–∞–∑–æ—á–Ω–∏–∫ –¢–∏–º–æ—à–∞. ‚ú®\n–ù–∞–ø–∏—à–∏ /skazka ‚Äî –∏ —è —Ä–∞—Å—Å–∫–∞–∂—É —Ç–µ–±–µ –¥–æ–±—Ä—É—é —Å–∫–∞–∑–∫—É."
    )

async def skazka(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü–æ–≥–æ–¥–∏ –Ω–µ–º–Ω–æ–≥–æ... —è –≤—Å–ø–æ–º–∏–Ω–∞—é —Å–∫–∞–∑–∫—É... ‚òï")
    story = await generate_fairytale()

    if len(story) <= 4096:
        await update.message.reply_text(story)
    else:
        for i in range(0, len(story), 4096):
            await update.message.reply_text(story[i:i+4096])

if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("skazka", skazka))

    import threading
    from http.server import BaseHTTPRequestHandler, HTTPServer

    class DummyHandler(BaseHTTPRequestHandler):
        def do_GET(self):
            self.send_response(200)
            self.end_headers()
            self.wfile.write(b'Service is up')

        def do_HEAD(self):
            self.send_response(200)
            self.end_headers()

    def run_dummy_server():
        server = HTTPServer(('0.0.0.0', 8080), DummyHandler)
        server.serve_forever()

    threading.Thread(target=run_dummy_server, daemon=True).start()
    app.run_polling()
