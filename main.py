import os
import httpx
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from dotenv import load_dotenv
from utils import generate_fairytale
from story_checker import is_story_complete

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

SYSTEM_PROMPT = """–¢—ã ‚Äî –¥–æ–±—Ä—ã–π —Å–∫–∞–∑–æ—á–Ω–∏–∫. –ü—Ä–∏–¥—É–º—ã–≤–∞–π –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–æ–±—Ä—ã–µ —Å–∫–∞–∑–∫–∏ –¥–ª—è –¥–µ—Ç–µ–π, —á—Ç–æ–±—ã –∏—Ö –º–æ–≥–ª–∏ —á–∏—Ç–∞—Ç—å —Ä–æ–¥–∏—Ç–µ–ª–∏ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º.
–ò—Å—Ç–æ—Ä–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç—ë–ø–ª—ã–º–∏, —Å –º–æ—Ä–∞–ª—å—é, –ª–µ–≥–∫–æ —á–∏—Ç–∞–µ–º—ã–º–∏. –ù–µ –ø–∏—à–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ –∏ –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞–π —Å–ª–æ–∂–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏.

–†–∞–∑–º–µ—Ä —Å–∫–∞–∑–∫–∏ ‚Äî 1500‚Äì2000 —Å–∏–º–≤–æ–ª–æ–≤."""

HEADERS = {
    "Authorization": f"Bearer {OPENROUTER_API_KEY}",
    "HTTP-Referer": "https://t.me/SkazochnikTimoshaBot",
    "Content-Type": "application/json"
}

async def generate_fairytale():
    payload = {
        "model": "deepseek/deepseek-r1-0528:free",
        "max_tokens": 1600,
        "messages": [
            {
                "role": "system",
                "content": (
                    "–¢—ã ‚Äî —Å–∫–∞–∑–æ—á–Ω–∏–∫. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –¥–æ–±—Ä—ã–µ, –ø–æ–Ω—è—Ç–Ω—ã–µ —Å–∫–∞–∑–∫–∏ –¥–ª—è –¥–µ—Ç–µ–π. "
                    "–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: –¥–µ—Ç–∏ 3‚Äì8 –ª–µ—Ç, —á–∏—Ç–∞—é—Ç —Ä–æ–¥–∏—Ç–µ–ª–∏. "
                    "–°–∫–∞–∑–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–π, –±–µ–∑ –æ–±—Ä—ã–≤–∞. –ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏—á–µ–≥–æ –ø–æ—Å–ª–µ —Å–∫–∞–∑–∫–∏. "
                    "–ñ–µ–ª–∞–µ–º—ã–π –æ–±—ä—ë–º ‚Äî –æ—Ç 1500 –¥–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤."
                )
            },
            {
                "role": "user",
                "content": "–†–∞—Å—Å–∫–∞–∂–∏ –¥–æ–±—Ä—É—é —Å–∫–∞–∑–∫—É."
            }
        ]
    }

    try:
        async with httpx.AsyncClient(timeout=60.0) as client:
            response = await client.post(
                "https://openrouter.ai/api/v1/chat/completions",
                headers=HEADERS,
                json=payload
            )
            response.raise_for_status()
            return response.json()["choices"][0]["message"]["content"]
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        return "–û–π... —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –¢–∏–º–æ—à–∞ –ø–æ—Ç–µ—Ä—è–ª —Å–∫–∞–∑–∫—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ."



async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –°–∫–∞–∑–æ—á–Ω–∏–∫ –¢–∏–º–æ—à–∞. ‚ú®\n–ù–∞–ø–∏—à–∏ /skazka ‚Äî –∏ —è —Ä–∞—Å—Å–∫–∞–∂—É —Ç–µ–±–µ –¥–æ–±—Ä—É—é —Å–∫–∞–∑–∫—É.")

async def skazka(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü–æ–≥–æ–¥–∏ –Ω–µ–º–Ω–æ–≥–æ... —è –≤—Å–ø–æ–º–∏–Ω–∞—é —Å–∫–∞–∑–∫—É... ‚òï")

    for _ in range(3):
        story = await generate_fairytale()
        print("\n=== GPT —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª ===\n", story)
        if is_story_complete(story):
            break
    else:
        story = "–°–∫–∞–∑–∫–∞ —Å–±–µ–∂–∞–ª–∞ –≤ –ª–µ—Å... –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ üêæ"

    if len(story) <= 4096:
        await update.message.reply_text(story)
    else:
        for i in range(0, len(story), 4096):
            await update.message.reply_text(story[i:i+4096])


if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("skazka", skazka))

    import threading
    from http.server import BaseHTTPRequestHandler, HTTPServer

    class DummyHandler(BaseHTTPRequestHandler):
        def do_GET(self):
            self.send_response(200)
            self.end_headers()
            self.wfile.write(b'Service is up')

        def do_HEAD(self):
            self.send_response(200)
            self.end_headers()

    def run_dummy_server():
        server = HTTPServer(('0.0.0.0', 8080), DummyHandler)
        server.serve_forever()

    threading.Thread(target=run_dummy_server, daemon=True).start()
    app.run_polling()
